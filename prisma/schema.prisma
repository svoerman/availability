// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String          @id @default(cuid())
  name            String
  email           String         @unique  // Now required
  password        String?        // Nullable because OAuth users won't have a password
  emailVerified   DateTime?
  image           String?        // For OAuth provider avatars
  accounts        Account[]      // For OAuth accounts
  sessions        Session[]      // For managing sessions
  availability    Availability[]
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  projects        ProjectMember[]
  createdProjects Project[]      @relation("CreatedProjects")
  organizations   OrganizationMember[]
  sentInvitations Invitation[]   @relation("SentInvitations")

  @@index([email])
}

model Project {
  id             String        @id @default(cuid())
  name           String
  description    String?
  startDate      DateTime
  sprintStartDay Int           @default(1) // 1-7 representing Monday-Sunday
  members        ProjectMember[]
  organization   Organization? @relation(fields: [organizationId], references: [id])
  organizationId String?
  sprints        Sprint[]
  createdById    String
  createdBy      User         @relation("CreatedProjects", fields: [createdById], references: [id])
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@index([organizationId])
  @@index([createdById])
}

model ProjectMember {
  id        String   @id @default(cuid())
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  role      UserRole @default(MEMBER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([projectId, userId])
  @@index([userId])
  @@index([projectId])
}

model Availability {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  date      DateTime
  dayPart   DayPart
  status    Status
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, date, dayPart])
  @@index([userId])
  @@index([date])
}

// NextAuth.js models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Organization {
  id          String    @id @default(cuid())
  name        String
  description String?
  members     OrganizationMember[]
  projects    Project[]
  invitations Invitation[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([name])
}

model OrganizationMember {
  id             String       @id @default(cuid())
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String
  user           User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  role           UserRole    @default(MEMBER)
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  @@unique([organizationId, userId])
  @@index([userId])
  @@index([organizationId])
}

model Invitation {
  id             String       @id @default(cuid())
  email          String
  token          String      @unique
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String
  inviter        User        @relation("SentInvitations", fields: [inviterId], references: [id])
  inviterId      String
  status         InvitationStatus @default(PENDING)
  invitationMetadata String?     @db.Text
  expiresAt      DateTime
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  @@index([email])
  @@index([token])
  @@index([organizationId])
  @@index([inviterId])
}

model Sprint {
  id        String   @id @default(cuid())
  startDate DateTime
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([projectId, startDate])
  @@index([projectId])
  @@index([startDate])
}

enum DayPart {
  MORNING
  AFTERNOON
  EVENING
}

enum Status {
  FREE
  NOT_WORKING
  PARTIALLY_AVAILABLE
  WORKING
}

enum UserRole {
  OWNER
  ADMIN
  MEMBER
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  EXPIRED
  REJECTED
}
